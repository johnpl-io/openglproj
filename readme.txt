Welcome to the Attractor Generator program that was created using OpenGL. All of the files needed to run the program are in the zip file (except for the python file). The program is able to create normal variations, user controlled, and random variations of  three chaotic attractors. The attractors included in the program are the Lorenz, RÃ¶ssler, and Four-Wing attractors. The program accepts inputs from a user and then will create a new window of what a desired user would like to see. There are multiple ways to run the program. One way, is through the included standalone executable. This way is by far the slowest loading time as the whole program and its libraries are put into a single file. The second way is through the included openglprojfinalfast folder. To run it from there click on the openglprojfinal application file inside of the folder. The last way to run it is through python itself. This way is fast but annoying as it requires the installion of python 3 and a couple of packages including random, PyOpenGL, math, and pygame. This can be done using the included python script which also contains all the code. Once the program is running options can be selected by entering a number associated by a desired choice and pressing enter. To input multiple numbers at once, such as picking coloring using the rgb coloring scheme input the numbers with commas between them and no spaces. For example:12,13,13. Use decimals instead of fractions if needed. Once a user is able to successfully go through their desired options a second window should popup with their 3d generated attractor. The controls are as follows: 
arrow keys for up down left and right, left shift for zooming in, left caps lock for zooming out, and right shift to rotate. The controls can disorient due to a rotation. To create another attractor close the program and restart the process. The program has been tested and works on both Windows and Linux. However, it can be slow without a good graphics card. On my desktop with a AMDrx580 it runs perfectly fine but it can be alittle slow on my laptop without a dedicated graphics card.  I have included some samples of the randomly generated variations of the attractors.Note: the Four-Wing attractor may require zooming in as it is quite small compared to the others. Some areas where this program could be improved, optimized load times through executables, preventing disorientation of controls upon rotation, using machine learning to generate chaotic systems instead of using a random range that creates chaotic systems.
